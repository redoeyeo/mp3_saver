#!/usr/bin/env python
import subprocess
import sys
from program import single_download
from pathlib import Path
import shutil
import os
from subprocess import check_call
import json

try:
    MUSIC = os.environ['MUSIC']
except KeyError:
    MUSIC = os.path.join(os.environ['HOME'], 'Desktop', 'Shared', 'Музяка')


DIRECTORY = Path(__file__).parent
SONGS = Path(MUSIC).joinpath('info.json')
LOADED = Path(str(Path.home() / "Downloads"))


def usage():
    print(f'usage: ')
    print(f'save_song *SONGS')


def save_download(name: str, url: str):
    try:
        data = json.loads(SONGS.read_text(encoding='utf-8'))
    except (IOError, json.JSONDecodeError):
        data = []
    song = {
        "link": url,
        "name": name
    }
    data.append(song)
    SONGS.write_text(json.dumps(data, ensure_ascii=False), encoding='utf-8')


def clear_downloads():
    directory = LOADED
    for file in directory.glob('*.jpg'):
        os.remove(file)
    for file in directory.glob('*.webm*'):
        os.remove(file)


def check_installation():
    print('checking youtube-dl')
    check_call('youtube-dl --help', stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
    print('checking ffmpeg')
    check_call('ffmpeg --help', stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)


def downloaded(slink: str):
    try:
        data = json.loads(SONGS.read_text(encoding='utf-8'))
    except (IOError, json.JSONDecodeError):
        return
    for song in data:
        link = song.get('link', '')
        name = song.get("name", '') 
        if link == slink:
            return name
    return


def main():
    songs = sys.argv[1:]
    songs = [song.strip() for song in songs]
    if len(songs) == 0:
        usage()
        return
    # check_installation()
    clear_downloads()
    for song in songs:
        print(f'downloading {song}')
        name = single_download(song)
        name = name or ''
        if name:
            save_download(url=song, name=name)
        clear_downloads()


if __name__ == '__main__':
    main()
